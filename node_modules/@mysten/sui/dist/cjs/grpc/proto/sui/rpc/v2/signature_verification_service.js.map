{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature_verification_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature_verification_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { ActiveJwk } from './transaction.js';\nimport { UserSignature } from './signature.js';\nimport { Bcs } from './bcs.js';\n/**\n * @generated from protobuf message sui.rpc.v2.VerifySignatureRequest\n */\nexport interface VerifySignatureRequest {\n\t/**\n\t * The message to verify against.\n\t *\n\t * Today the only supported message types are `PersonalMessage` and\n\t * `TransactionData` and the `Bcs.name` must be set to indicate which type of\n\t * message is being verified.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.Bcs message = 1;\n\t */\n\tmessage?: Bcs;\n\t/**\n\t * The signature to verify.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.UserSignature signature = 2;\n\t */\n\tsignature?: UserSignature;\n\t/**\n\t * Optional. Address to validate against the provided signature.\n\t *\n\t * If provided, this address will be compared against the the address derived\n\t * from the provide signature and a successful response will only be returned\n\t * if they match.\n\t *\n\t * @generated from protobuf field: optional string address = 3;\n\t */\n\taddress?: string;\n\t/**\n\t * The set of JWKs to use when verifying Zklogin signatures.\n\t * If this is empty the current set of valid JWKs stored onchain will be used\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.ActiveJwk jwks = 4;\n\t */\n\tjwks: ActiveJwk[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2.VerifySignatureResponse\n */\nexport interface VerifySignatureResponse {\n\t/**\n\t * Indicates if the provided signature was valid given the requested parameters.\n\t *\n\t * @generated from protobuf field: optional bool is_valid = 1;\n\t */\n\tisValid?: boolean;\n\t/**\n\t * If `is_valid` is `false`, this is the reason for why the signature verification failed.\n\t *\n\t * @generated from protobuf field: optional string reason = 2;\n\t */\n\treason?: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureRequest$Type extends MessageType<VerifySignatureRequest> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.VerifySignatureRequest', [\n\t\t\t{ no: 1, name: 'message', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'signature', kind: 'message', T: () => UserSignature },\n\t\t\t{ no: 3, name: 'address', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'jwks', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => ActiveJwk },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.VerifySignatureRequest\n */\nexport const VerifySignatureRequest = new VerifySignatureRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureResponse$Type extends MessageType<VerifySignatureResponse> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.VerifySignatureResponse', [\n\t\t\t{ no: 1, name: 'is_valid', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },\n\t\t\t{ no: 2, name: 'reason', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.VerifySignatureResponse\n */\nexport const VerifySignatureResponse = new VerifySignatureResponse$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport const SignatureVerificationService = new ServiceType(\n\t'sui.rpc.v2.SignatureVerificationService',\n\t[{ name: 'VerifySignature', options: {}, I: VerifySignatureRequest, O: VerifySignatureResponse }],\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,yBAA4B;AAC5B,qBAA4B;AAC5B,yBAA0B;AAC1B,uBAA8B;AAC9B,iBAAoB;AAyDpB,MAAM,oCAAoC,2BAAoC;AAAA,EAC7E,cAAc;AACb,UAAM,qCAAqC;AAAA,MAC1C,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,eAAI;AAAA,MACxD,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,+BAAc;AAAA,MACpE;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAChF,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,WAAW,QAAQ,GAAyB,GAAG,MAAM,6BAAU;AAAA,IAC7F,CAAC;AAAA,EACF;AACD;AAIO,MAAM,yBAAyB,IAAI,4BAA4B;AAEtE,MAAM,qCAAqC,2BAAqC;AAAA,EAC/E,cAAc;AACb,UAAM,sCAAsC;AAAA,MAC3C;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAY,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAsB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IAChF,CAAC;AAAA,EACF;AACD;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAIjE,MAAM,+BAA+B,IAAI;AAAA,EAC/C;AAAA,EACA,CAAC,EAAE,MAAM,mBAAmB,SAAS,CAAC,GAAG,GAAG,wBAAwB,GAAG,wBAAwB,CAAC;AACjG;",
  "names": []
}
