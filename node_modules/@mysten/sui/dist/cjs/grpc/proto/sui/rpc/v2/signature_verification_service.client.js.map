{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature_verification_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature_verification_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport type { RpcTransport } from '@protobuf-ts/runtime-rpc';\nimport type { ServiceInfo } from '@protobuf-ts/runtime-rpc';\nimport { SignatureVerificationService } from './signature_verification_service.js';\nimport { stackIntercept } from '@protobuf-ts/runtime-rpc';\nimport type { VerifySignatureResponse } from './signature_verification_service.js';\nimport type { VerifySignatureRequest } from './signature_verification_service.js';\nimport type { UnaryCall } from '@protobuf-ts/runtime-rpc';\nimport type { RpcOptions } from '@protobuf-ts/runtime-rpc';\n/**\n * @generated from protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport interface ISignatureVerificationServiceClient {\n\t/**\n\t * Perform signature verification of a UserSignature against the provided message.\n\t *\n\t * @generated from protobuf rpc: VerifySignature(sui.rpc.v2.VerifySignatureRequest) returns (sui.rpc.v2.VerifySignatureResponse);\n\t */\n\tverifySignature(\n\t\tinput: VerifySignatureRequest,\n\t\toptions?: RpcOptions,\n\t): UnaryCall<VerifySignatureRequest, VerifySignatureResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport class SignatureVerificationServiceClient\n\timplements ISignatureVerificationServiceClient, ServiceInfo\n{\n\ttypeName = SignatureVerificationService.typeName;\n\tmethods = SignatureVerificationService.methods;\n\toptions = SignatureVerificationService.options;\n\tconstructor(private readonly _transport: RpcTransport) {}\n\t/**\n\t * Perform signature verification of a UserSignature against the provided message.\n\t *\n\t * @generated from protobuf rpc: VerifySignature(sui.rpc.v2.VerifySignatureRequest) returns (sui.rpc.v2.VerifySignatureResponse);\n\t */\n\tverifySignature(\n\t\tinput: VerifySignatureRequest,\n\t\toptions?: RpcOptions,\n\t): UnaryCall<VerifySignatureRequest, VerifySignatureResponse> {\n\t\tconst method = this.methods[0],\n\t\t\topt = this._transport.mergeOptions(options);\n\t\treturn stackIntercept<VerifySignatureRequest, VerifySignatureResponse>(\n\t\t\t'unary',\n\t\t\tthis._transport,\n\t\t\tmethod,\n\t\t\topt,\n\t\t\tinput,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,4CAA6C;AAC7C,yBAA+B;AAsBxB,MAAM,mCAEb;AAAA,EAIC,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,mEAA6B;AACxC,mBAAU,mEAA6B;AACvC,mBAAU,mEAA6B;AAAA,EACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxD,gBACC,OACA,SAC6D;AAC7D,UAAM,SAAS,KAAK,QAAQ,CAAC,GAC5B,MAAM,KAAK,WAAW,aAAa,OAAO;AAC3C,eAAO;AAAA,MACN;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
