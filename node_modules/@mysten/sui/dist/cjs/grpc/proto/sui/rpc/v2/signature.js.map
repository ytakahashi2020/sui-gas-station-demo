{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { JwkId } from './jwk.js';\nimport { SignatureScheme } from './signature_scheme.js';\nimport { Bcs } from './bcs.js';\n/**\n * A signature from a user.\n *\n * @generated from protobuf message sui.rpc.v2.UserSignature\n */\nexport interface UserSignature {\n\t/**\n\t * This signature serialized as as BCS.\n\t *\n\t * When provided as input this will support both the form that is length\n\t * prefixed as well as not length prefixed.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.Bcs bcs = 1;\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 2;\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * @generated from protobuf oneof: signature\n\t */\n\tsignature:\n\t\t| {\n\t\t\t\toneofKind: 'simple';\n\t\t\t\t/**\n\t\t\t\t * Simple signature if scheme is ed25519 | secp256k1 | secp256r1.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2.SimpleSignature simple = 3;\n\t\t\t\t */\n\t\t\t\tsimple: SimpleSignature;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'multisig';\n\t\t\t\t/**\n\t\t\t\t * The multisig aggregated signature if scheme is `MULTISIG`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2.MultisigAggregatedSignature multisig = 4;\n\t\t\t\t */\n\t\t\t\tmultisig: MultisigAggregatedSignature;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'zklogin';\n\t\t\t\t/**\n\t\t\t\t * The zklogin authenticator if scheme is `ZKLOGIN`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2.ZkLoginAuthenticator zklogin = 5;\n\t\t\t\t */\n\t\t\t\tzklogin: ZkLoginAuthenticator;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: 'passkey';\n\t\t\t\t/**\n\t\t\t\t * The passkey authenticator if scheme is `PASSKEY`.\n\t\t\t\t *\n\t\t\t\t * @generated from protobuf field: sui.rpc.v2.PasskeyAuthenticator passkey = 6;\n\t\t\t\t */\n\t\t\t\tpasskey: PasskeyAuthenticator;\n\t\t  }\n\t\t| {\n\t\t\t\toneofKind: undefined;\n\t\t  };\n}\n/**\n * Either an ed25519, secp256k1 or secp256r1 signature\n *\n * @generated from protobuf message sui.rpc.v2.SimpleSignature\n */\nexport interface SimpleSignature {\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Signature bytes\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2;\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * Public key bytes\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 3;\n\t */\n\tpublicKey?: Uint8Array;\n}\n/**\n * Public key equivalent for zklogin authenticators.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginPublicIdentifier\n */\nexport interface ZkLoginPublicIdentifier {\n\t/**\n\t * @generated from protobuf field: optional string iss = 1;\n\t */\n\tiss?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string address_seed = 2;\n\t */\n\taddressSeed?: string;\n}\n/**\n * Set of valid public keys for multisig committee members.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMemberPublicKey\n */\nexport interface MultisigMemberPublicKey {\n\t/**\n\t * The signature scheme of this public key.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Public key bytes if scheme is ed25519 | secp256k1 | secp256r1 | passkey.\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 2;\n\t */\n\tpublicKey?: Uint8Array;\n\t/**\n\t * A zklogin public identifier if scheme is zklogin.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginPublicIdentifier zklogin = 3;\n\t */\n\tzklogin?: ZkLoginPublicIdentifier;\n}\n/**\n * A member in a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMember\n */\nexport interface MultisigMember {\n\t/**\n\t * The public key of the committee member.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.MultisigMemberPublicKey public_key = 1;\n\t */\n\tpublicKey?: MultisigMemberPublicKey;\n\t/**\n\t * The weight of this member's signature.\n\t *\n\t * @generated from protobuf field: optional uint32 weight = 2;\n\t */\n\tweight?: number;\n}\n/**\n * A multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigCommittee\n */\nexport interface MultisigCommittee {\n\t/**\n\t * A list of committee members and their corresponding weight.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.MultisigMember members = 1;\n\t */\n\tmembers: MultisigMember[];\n\t/**\n\t * The threshold of signatures needed to validate a signature from\n\t * this committee.\n\t *\n\t * @generated from protobuf field: optional uint32 threshold = 2;\n\t */\n\tthreshold?: number;\n}\n/**\n * Aggregated signature from members of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigAggregatedSignature\n */\nexport interface MultisigAggregatedSignature {\n\t/**\n\t * The plain signatures encoded with signature scheme.\n\t *\n\t * The signatures must be in the same order as they are listed in the committee.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.MultisigMemberSignature signatures = 1;\n\t */\n\tsignatures: MultisigMemberSignature[];\n\t/**\n\t * Bitmap indicating which committee members contributed to the\n\t * signature.\n\t *\n\t * @generated from protobuf field: optional uint32 bitmap = 2;\n\t */\n\tbitmap?: number;\n\t/**\n\t * If present, means this signature's on-chain format uses the old\n\t * legacy multisig format.\n\t *\n\t * @generated from protobuf field: optional bytes legacy_bitmap = 3;\n\t */\n\tlegacyBitmap?: Uint8Array;\n\t/**\n\t * The committee to use to validate this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.MultisigCommittee committee = 4;\n\t */\n\tcommittee?: MultisigCommittee;\n}\n/**\n * A signature from a member of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMemberSignature\n */\nexport interface MultisigMemberSignature {\n\t/**\n\t * The signature scheme of this signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n\t */\n\tscheme?: SignatureScheme;\n\t/**\n\t * Signature bytes if scheme is ed25519 | secp256k1 | secp256r1.\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2;\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * The zklogin authenticator if scheme is `ZKLOGIN`.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginAuthenticator zklogin = 3;\n\t */\n\tzklogin?: ZkLoginAuthenticator;\n\t/**\n\t * The passkey authenticator if scheme is `PASSKEY`.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.PasskeyAuthenticator passkey = 4;\n\t */\n\tpasskey?: PasskeyAuthenticator;\n}\n/**\n * A zklogin authenticator.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginAuthenticator\n */\nexport interface ZkLoginAuthenticator {\n\t/**\n\t * Zklogin proof and inputs required to perform proof verification.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginInputs inputs = 1;\n\t */\n\tinputs?: ZkLoginInputs;\n\t/**\n\t * Maximum epoch for which the proof is valid.\n\t *\n\t * @generated from protobuf field: optional uint64 max_epoch = 2;\n\t */\n\tmaxEpoch?: bigint;\n\t/**\n\t * User signature with the public key attested to by the provided proof.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SimpleSignature signature = 3;\n\t */\n\tsignature?: SimpleSignature;\n\t/**\n\t * The public identifier (similar to a public key) for this zklogin authenticator\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginPublicIdentifier public_identifier = 4;\n\t */\n\tpublicIdentifier?: ZkLoginPublicIdentifier;\n\t/**\n\t * The id of the JWK used to authorize this zklogin authenticator\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.JwkId jwk_id = 5;\n\t */\n\tjwkId?: JwkId;\n}\n/**\n * A zklogin groth16 proof and the required inputs to perform proof verification.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginInputs\n */\nexport interface ZkLoginInputs {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginProof proof_points = 1;\n\t */\n\tproofPoints?: ZkLoginProof;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.ZkLoginClaim iss_base64_details = 2;\n\t */\n\tissBase64Details?: ZkLoginClaim;\n\t/**\n\t * @generated from protobuf field: optional string header_base64 = 3;\n\t */\n\theaderBase64?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string address_seed = 4;\n\t */\n\taddressSeed?: string;\n}\n/**\n * A zklogin groth16 proof.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginProof\n */\nexport interface ZkLoginProof {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.CircomG1 a = 1;\n\t */\n\ta?: CircomG1;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.CircomG2 b = 2;\n\t */\n\tb?: CircomG2;\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.CircomG1 c = 3;\n\t */\n\tc?: CircomG1;\n}\n/**\n * A claim of the iss in a zklogin proof.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginClaim\n */\nexport interface ZkLoginClaim {\n\t/**\n\t * @generated from protobuf field: optional string value = 1;\n\t */\n\tvalue?: string;\n\t/**\n\t * @generated from protobuf field: optional uint32 index_mod_4 = 2;\n\t */\n\tindexMod4?: number;\n}\n/**\n * A G1 point.\n *\n * @generated from protobuf message sui.rpc.v2.CircomG1\n */\nexport interface CircomG1 {\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e0 = 1;\n\t */\n\te0?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e1 = 2;\n\t */\n\te1?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e2 = 3;\n\t */\n\te2?: string;\n}\n/**\n * A G2 point.\n *\n * @generated from protobuf message sui.rpc.v2.CircomG2\n */\nexport interface CircomG2 {\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e00 = 1;\n\t */\n\te00?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e01 = 2;\n\t */\n\te01?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e10 = 3;\n\t */\n\te10?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e11 = 4;\n\t */\n\te11?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e20 = 5;\n\t */\n\te20?: string;\n\t/**\n\t * base10 encoded Bn254FieldElement\n\t *\n\t * @generated from protobuf field: optional string e21 = 6;\n\t */\n\te21?: string;\n}\n/**\n * A passkey authenticator.\n *\n * See\n * [struct.PasskeyAuthenticator](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/struct.PasskeyAuthenticator.html#bcs)\n * for more information on the requirements on the shape of the\n * `client_data_json` field.\n *\n * @generated from protobuf message sui.rpc.v2.PasskeyAuthenticator\n */\nexport interface PasskeyAuthenticator {\n\t/**\n\t * Opaque authenticator data for this passkey signature.\n\t *\n\t * See [Authenticator Data](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data) for\n\t * more information on this field.\n\t *\n\t * @generated from protobuf field: optional bytes authenticator_data = 1;\n\t */\n\tauthenticatorData?: Uint8Array;\n\t/**\n\t * Structured, unparsed, JSON for this passkey signature.\n\t *\n\t * See [CollectedClientData](https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata)\n\t * for more information on this field.\n\t *\n\t * @generated from protobuf field: optional string client_data_json = 2;\n\t */\n\tclientDataJson?: string;\n\t/**\n\t * A secp256r1 signature.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.SimpleSignature signature = 3;\n\t */\n\tsignature?: SimpleSignature;\n}\n/**\n * The validator set for a particular epoch.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorCommittee\n */\nexport interface ValidatorCommittee {\n\t/**\n\t * The epoch where this committee governs.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1;\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The committee members.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.ValidatorCommitteeMember members = 2;\n\t */\n\tmembers: ValidatorCommitteeMember[];\n}\n/**\n * A member of a validator committee.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorCommitteeMember\n */\nexport interface ValidatorCommitteeMember {\n\t/**\n\t * The 96-byte Bls12381 public key for this validator.\n\t *\n\t * @generated from protobuf field: optional bytes public_key = 1;\n\t */\n\tpublicKey?: Uint8Array;\n\t/**\n\t * voting weight this validator possesses.\n\t *\n\t * @generated from protobuf field: optional uint64 weight = 2;\n\t */\n\tweight?: bigint;\n}\n/**\n * / An aggregated signature from multiple validators.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorAggregatedSignature\n */\nexport interface ValidatorAggregatedSignature {\n\t/**\n\t * The epoch when this signature was produced.\n\t *\n\t * This can be used to lookup the `ValidatorCommittee` from this epoch\n\t * to verify this signature.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 1;\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The 48-byte Bls12381 aggregated signature.\n\t *\n\t * @generated from protobuf field: optional bytes signature = 2;\n\t */\n\tsignature?: Uint8Array;\n\t/**\n\t * Bitmap indicating which members of the committee contributed to\n\t * this signature.\n\t *\n\t * @generated from protobuf field: optional bytes bitmap = 3;\n\t */\n\tbitmap?: Uint8Array;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UserSignature$Type extends MessageType<UserSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.UserSignature', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 3, name: 'simple', kind: 'message', oneof: 'signature', T: () => SimpleSignature },\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'multisig',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => MultisigAggregatedSignature,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'zklogin',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => ZkLoginAuthenticator,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 6,\n\t\t\t\tname: 'passkey',\n\t\t\t\tkind: 'message',\n\t\t\t\toneof: 'signature',\n\t\t\t\tT: () => PasskeyAuthenticator,\n\t\t\t},\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.UserSignature\n */\nexport const UserSignature = new UserSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimpleSignature$Type extends MessageType<SimpleSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.SimpleSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SimpleSignature\n */\nexport const SimpleSignature = new SimpleSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginPublicIdentifier$Type extends MessageType<ZkLoginPublicIdentifier> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ZkLoginPublicIdentifier', [\n\t\t\t{ no: 1, name: 'iss', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'address_seed', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginPublicIdentifier\n */\nexport const ZkLoginPublicIdentifier = new ZkLoginPublicIdentifier$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberPublicKey$Type extends MessageType<MultisigMemberPublicKey> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.MultisigMemberPublicKey', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'zklogin', kind: 'message', T: () => ZkLoginPublicIdentifier },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMemberPublicKey\n */\nexport const MultisigMemberPublicKey = new MultisigMemberPublicKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMember$Type extends MessageType<MultisigMember> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.MultisigMember', [\n\t\t\t{ no: 1, name: 'public_key', kind: 'message', T: () => MultisigMemberPublicKey },\n\t\t\t{ no: 2, name: 'weight', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMember\n */\nexport const MultisigMember = new MultisigMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigCommittee$Type extends MessageType<MultisigCommittee> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.MultisigCommittee', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'members',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => MultisigMember,\n\t\t\t},\n\t\t\t{ no: 2, name: 'threshold', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigCommittee\n */\nexport const MultisigCommittee = new MultisigCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigAggregatedSignature$Type extends MessageType<MultisigAggregatedSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.MultisigAggregatedSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'signatures',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => MultisigMemberSignature,\n\t\t\t},\n\t\t\t{ no: 2, name: 'bitmap', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t\t{ no: 3, name: 'legacy_bitmap', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 4, name: 'committee', kind: 'message', T: () => MultisigCommittee },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigAggregatedSignature\n */\nexport const MultisigAggregatedSignature = new MultisigAggregatedSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberSignature$Type extends MessageType<MultisigMemberSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.MultisigMemberSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'scheme',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => ['sui.rpc.v2.SignatureScheme', SignatureScheme],\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'zklogin', kind: 'message', T: () => ZkLoginAuthenticator },\n\t\t\t{ no: 4, name: 'passkey', kind: 'message', T: () => PasskeyAuthenticator },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMemberSignature\n */\nexport const MultisigMemberSignature = new MultisigMemberSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginAuthenticator$Type extends MessageType<ZkLoginAuthenticator> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ZkLoginAuthenticator', [\n\t\t\t{ no: 1, name: 'inputs', kind: 'message', T: () => ZkLoginInputs },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'max_epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 3, name: 'signature', kind: 'message', T: () => SimpleSignature },\n\t\t\t{ no: 4, name: 'public_identifier', kind: 'message', T: () => ZkLoginPublicIdentifier },\n\t\t\t{ no: 5, name: 'jwk_id', kind: 'message', T: () => JwkId },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginAuthenticator\n */\nexport const ZkLoginAuthenticator = new ZkLoginAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginInputs$Type extends MessageType<ZkLoginInputs> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ZkLoginInputs', [\n\t\t\t{ no: 1, name: 'proof_points', kind: 'message', T: () => ZkLoginProof },\n\t\t\t{ no: 2, name: 'iss_base64_details', kind: 'message', T: () => ZkLoginClaim },\n\t\t\t{ no: 3, name: 'header_base64', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'address_seed', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginInputs\n */\nexport const ZkLoginInputs = new ZkLoginInputs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginProof$Type extends MessageType<ZkLoginProof> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ZkLoginProof', [\n\t\t\t{ no: 1, name: 'a', kind: 'message', T: () => CircomG1 },\n\t\t\t{ no: 2, name: 'b', kind: 'message', T: () => CircomG2 },\n\t\t\t{ no: 3, name: 'c', kind: 'message', T: () => CircomG1 },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginProof\n */\nexport const ZkLoginProof = new ZkLoginProof$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginClaim$Type extends MessageType<ZkLoginClaim> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ZkLoginClaim', [\n\t\t\t{ no: 1, name: 'value', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'index_mod_4', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginClaim\n */\nexport const ZkLoginClaim = new ZkLoginClaim$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG1$Type extends MessageType<CircomG1> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.CircomG1', [\n\t\t\t{ no: 1, name: 'e0', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'e1', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'e2', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CircomG1\n */\nexport const CircomG1 = new CircomG1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG2$Type extends MessageType<CircomG2> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.CircomG2', [\n\t\t\t{ no: 1, name: 'e00', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 2, name: 'e01', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'e10', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 4, name: 'e11', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 5, name: 'e20', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 6, name: 'e21', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CircomG2\n */\nexport const CircomG2 = new CircomG2$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PasskeyAuthenticator$Type extends MessageType<PasskeyAuthenticator> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.PasskeyAuthenticator', [\n\t\t\t{ no: 1, name: 'authenticator_data', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 2, name: 'client_data_json', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'signature', kind: 'message', T: () => SimpleSignature },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.PasskeyAuthenticator\n */\nexport const PasskeyAuthenticator = new PasskeyAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommittee$Type extends MessageType<ValidatorCommittee> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ValidatorCommittee', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'members',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => ValidatorCommitteeMember,\n\t\t\t},\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorCommittee\n */\nexport const ValidatorCommittee = new ValidatorCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommitteeMember$Type extends MessageType<ValidatorCommitteeMember> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ValidatorCommitteeMember', [\n\t\t\t{ no: 1, name: 'public_key', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'weight',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorCommitteeMember\n */\nexport const ValidatorCommitteeMember = new ValidatorCommitteeMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorAggregatedSignature$Type extends MessageType<ValidatorAggregatedSignature> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.ValidatorAggregatedSignature', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 2, name: 'signature', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t\t{ no: 3, name: 'bitmap', kind: 'scalar', opt: true, T: 12 /*ScalarType.BYTES*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorAggregatedSignature\n */\nexport const ValidatorAggregatedSignature = new ValidatorAggregatedSignature$Type();\n"],
  "mappings": "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",
  "names": []
}
