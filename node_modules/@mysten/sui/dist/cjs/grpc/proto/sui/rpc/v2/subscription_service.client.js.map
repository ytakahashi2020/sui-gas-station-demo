{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/subscription_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/subscription_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport type { RpcTransport } from '@protobuf-ts/runtime-rpc';\nimport type { ServiceInfo } from '@protobuf-ts/runtime-rpc';\nimport { SubscriptionService } from './subscription_service.js';\nimport { stackIntercept } from '@protobuf-ts/runtime-rpc';\nimport type { SubscribeCheckpointsResponse } from './subscription_service.js';\nimport type { SubscribeCheckpointsRequest } from './subscription_service.js';\nimport type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';\nimport type { RpcOptions } from '@protobuf-ts/runtime-rpc';\n/**\n * @generated from protobuf service sui.rpc.v2.SubscriptionService\n */\nexport interface ISubscriptionServiceClient {\n\t/**\n\t * Subscribe to the stream of checkpoints.\n\t *\n\t * This API provides a subscription to the checkpoint stream for the Sui\n\t * blockchain. When a subscription is initialized the stream will begin with\n\t * the latest executed checkpoint as seen by the server. Responses are\n\t * guaranteed to return checkpoints in-order and without gaps. This enables\n\t * clients to know exactly the last checkpoint they have processed and in the\n\t * event the subscription terminates (either by the client/server or by the\n\t * connection breaking), clients will be able to reinitialize a subscription\n\t * and then leverage other APIs in order to request data for the checkpoints\n\t * they missed.\n\t *\n\t * @generated from protobuf rpc: SubscribeCheckpoints(sui.rpc.v2.SubscribeCheckpointsRequest) returns (stream sui.rpc.v2.SubscribeCheckpointsResponse);\n\t */\n\tsubscribeCheckpoints(\n\t\tinput: SubscribeCheckpointsRequest,\n\t\toptions?: RpcOptions,\n\t): ServerStreamingCall<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2.SubscriptionService\n */\nexport class SubscriptionServiceClient implements ISubscriptionServiceClient, ServiceInfo {\n\ttypeName = SubscriptionService.typeName;\n\tmethods = SubscriptionService.methods;\n\toptions = SubscriptionService.options;\n\tconstructor(private readonly _transport: RpcTransport) {}\n\t/**\n\t * Subscribe to the stream of checkpoints.\n\t *\n\t * This API provides a subscription to the checkpoint stream for the Sui\n\t * blockchain. When a subscription is initialized the stream will begin with\n\t * the latest executed checkpoint as seen by the server. Responses are\n\t * guaranteed to return checkpoints in-order and without gaps. This enables\n\t * clients to know exactly the last checkpoint they have processed and in the\n\t * event the subscription terminates (either by the client/server or by the\n\t * connection breaking), clients will be able to reinitialize a subscription\n\t * and then leverage other APIs in order to request data for the checkpoints\n\t * they missed.\n\t *\n\t * @generated from protobuf rpc: SubscribeCheckpoints(sui.rpc.v2.SubscribeCheckpointsRequest) returns (stream sui.rpc.v2.SubscribeCheckpointsResponse);\n\t */\n\tsubscribeCheckpoints(\n\t\tinput: SubscribeCheckpointsRequest,\n\t\toptions?: RpcOptions,\n\t): ServerStreamingCall<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse> {\n\t\tconst method = this.methods[0],\n\t\t\topt = this._transport.mergeOptions(options);\n\t\treturn stackIntercept<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse>(\n\t\t\t'serverStreaming',\n\t\t\tthis._transport,\n\t\t\tmethod,\n\t\t\topt,\n\t\t\tinput,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,kCAAoC;AACpC,yBAA+B;AAgCxB,MAAM,0BAA6E;AAAA,EAIzF,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,gDAAoB;AAC/B,mBAAU,gDAAoB;AAC9B,mBAAU,gDAAoB;AAAA,EAC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBxD,qBACC,OACA,SACiF;AACjF,UAAM,SAAS,KAAK,QAAQ,CAAC,GAC5B,MAAM,KAAK,WAAW,aAAa,OAAO;AAC3C,eAAO;AAAA,MACN;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
