{
  "version": 3,
  "sources": ["../../../../../../src/grpc/proto/google/rpc/status.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"google/rpc/status.proto\" (package \"google.rpc\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { Any } from '../protobuf/any.js';\n/**\n * The `Status` type defines a logical error model that is suitable for\n * different programming environments, including REST APIs and RPC APIs. It is\n * used by [gRPC](https://github.com/grpc). Each `Status` message contains\n * three pieces of data: error code, error message, and error details.\n *\n * You can find out more about this error model and how to work with it in the\n * [API Design Guide](https://cloud.google.com/apis/design/errors).\n *\n * @generated from protobuf message google.rpc.Status\n */\nexport interface Status {\n\t/**\n\t * The status code, which should be an enum value of\n\t * [google.rpc.Code][google.rpc.Code].\n\t *\n\t * @generated from protobuf field: int32 code = 1;\n\t */\n\tcode: number;\n\t/**\n\t * A developer-facing error message, which should be in English. Any\n\t * user-facing error message should be localized and sent in the\n\t * [google.rpc.Status.details][google.rpc.Status.details] field, or localized\n\t * by the client.\n\t *\n\t * @generated from protobuf field: string message = 2;\n\t */\n\tmessage: string;\n\t/**\n\t * A list of messages that carry the error details.  There is a common set of\n\t * message types for APIs to use.\n\t *\n\t * @generated from protobuf field: repeated google.protobuf.Any details = 3;\n\t */\n\tdetails: Any[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Status$Type extends MessageType<Status> {\n\tconstructor() {\n\t\tsuper('google.rpc.Status', [\n\t\t\t{ no: 1, name: 'code', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n\t\t\t{ no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 3, name: 'details', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => Any },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message google.rpc.Status\n */\nexport const Status = new Status$Type();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA,qBAA4B;AAC5B,iBAAoB;AAsCpB,MAAM,oBAAoB,2BAAoB;AAAA,EAC7C,cAAc;AACb,UAAM,qBAAqB;AAAA,MAC1B;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAU,GAAG;AAAA;AAAA,MAAuB;AAAA,MACjE;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,GAAG;AAAA;AAAA,MAAwB;AAAA,MACrE,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,QAAQ,GAAyB,GAAG,MAAM,eAAI;AAAA,IAC1F,CAAC;AAAA,EACF;AACD;AAIO,MAAM,SAAS,IAAI,YAAY;",
  "names": []
}
