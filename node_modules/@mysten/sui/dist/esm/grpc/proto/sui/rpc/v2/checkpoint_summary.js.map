{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/checkpoint_summary.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/checkpoint_summary.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from '@protobuf-ts/runtime';\nimport { ValidatorCommitteeMember } from './signature.js';\nimport { Timestamp } from '../../../google/protobuf/timestamp.js';\nimport { GasCostSummary } from './gas_cost_summary.js';\nimport { Bcs } from './bcs.js';\n/**\n * A header for a checkpoint on the Sui blockchain.\n *\n * On the Sui network, checkpoints define the history of the blockchain. They are quite similar to\n * the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,\n * however, forms checkpoints after transaction execution has already happened to provide a\n * certified history of the chain, instead of being formed before execution.\n *\n * Checkpoints commit to a variety of state, including but not limited to:\n * - The hash of the previous checkpoint.\n * - The set of transaction digests, their corresponding effects digests, as well as the set of\n *   user signatures that authorized its execution.\n * - The objects produced by a transaction.\n * - The set of live objects that make up the current state of the chain.\n * - On epoch transitions, the next validator committee.\n *\n * `CheckpointSummary`s themselves don't directly include all of the previous information but they\n * are the top-level type by which all the information is committed to transitively via cryptographic\n * hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of\n * the validator committee in a given epoch to allow verification of the chain's state.\n *\n * @generated from protobuf message sui.rpc.v2.CheckpointSummary\n */\nexport interface CheckpointSummary {\n\t/**\n\t * This CheckpointSummary serialized as BCS.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.Bcs bcs = 1;\n\t */\n\tbcs?: Bcs;\n\t/**\n\t * The digest of this CheckpointSummary.\n\t *\n\t * @generated from protobuf field: optional string digest = 2;\n\t */\n\tdigest?: string;\n\t/**\n\t * Epoch that this checkpoint belongs to.\n\t *\n\t * @generated from protobuf field: optional uint64 epoch = 3;\n\t */\n\tepoch?: bigint;\n\t/**\n\t * The height of this checkpoint.\n\t *\n\t * @generated from protobuf field: optional uint64 sequence_number = 4;\n\t */\n\tsequenceNumber?: bigint;\n\t/**\n\t * Total number of transactions committed since genesis, including those in this\n\t * checkpoint.\n\t *\n\t * @generated from protobuf field: optional uint64 total_network_transactions = 5;\n\t */\n\ttotalNetworkTransactions?: bigint;\n\t/**\n\t * The hash of the `CheckpointContents` for this checkpoint.\n\t *\n\t * @generated from protobuf field: optional string content_digest = 6;\n\t */\n\tcontentDigest?: string;\n\t/**\n\t * The hash of the previous `CheckpointSummary`.\n\t *\n\t * This will be `None` only for the first, or genesis, checkpoint.\n\t *\n\t * @generated from protobuf field: optional string previous_digest = 7;\n\t */\n\tpreviousDigest?: string;\n\t/**\n\t * The running total gas costs of all transactions included in the current epoch so far\n\t * until this checkpoint.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.GasCostSummary epoch_rolling_gas_cost_summary = 8;\n\t */\n\tepochRollingGasCostSummary?: GasCostSummary;\n\t/**\n\t * Timestamp of the checkpoint - number of milliseconds from the Unix epoch\n\t * Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent\n\t * checkpoints can have the same timestamp if they originate from the same underlining consensus commit.\n\t *\n\t * @generated from protobuf field: optional google.protobuf.Timestamp timestamp = 9;\n\t */\n\ttimestamp?: Timestamp;\n\t/**\n\t * Commitments to checkpoint-specific state.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.CheckpointCommitment commitments = 10;\n\t */\n\tcommitments: CheckpointCommitment[];\n\t/**\n\t * Extra data only present in the final checkpoint of an epoch.\n\t *\n\t * @generated from protobuf field: optional sui.rpc.v2.EndOfEpochData end_of_epoch_data = 11;\n\t */\n\tendOfEpochData?: EndOfEpochData;\n\t/**\n\t * `CheckpointSummary` is not an evolvable structure - it must be readable by any version of\n\t * the code. Therefore, to allow extensions to be added to `CheckpointSummary`,\n\t * opaque data can be added to checkpoints, which can be deserialized based on the current\n\t * protocol version.\n\t *\n\t * @generated from protobuf field: optional bytes version_specific_data = 12;\n\t */\n\tversionSpecificData?: Uint8Array;\n}\n/**\n * Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.\n *\n * @generated from protobuf message sui.rpc.v2.EndOfEpochData\n */\nexport interface EndOfEpochData {\n\t/**\n\t * The set of validators that will be in the `ValidatorCommittee` for the next epoch.\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.ValidatorCommitteeMember next_epoch_committee = 1;\n\t */\n\tnextEpochCommittee: ValidatorCommitteeMember[];\n\t/**\n\t * The protocol version that is in effect during the next epoch.\n\t *\n\t * @generated from protobuf field: optional uint64 next_epoch_protocol_version = 2;\n\t */\n\tnextEpochProtocolVersion?: bigint;\n\t/**\n\t * Commitments to epoch specific state (live object set)\n\t *\n\t * @generated from protobuf field: repeated sui.rpc.v2.CheckpointCommitment epoch_commitments = 3;\n\t */\n\tepochCommitments: CheckpointCommitment[];\n}\n/**\n * A commitment made by a checkpoint.\n *\n * @generated from protobuf message sui.rpc.v2.CheckpointCommitment\n */\nexport interface CheckpointCommitment {\n\t/**\n\t * @generated from protobuf field: optional sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind kind = 1;\n\t */\n\tkind?: CheckpointCommitment_CheckpointCommitmentKind;\n\t/**\n\t * @generated from protobuf field: optional string digest = 2;\n\t */\n\tdigest?: string;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind\n */\nexport enum CheckpointCommitment_CheckpointCommitmentKind {\n\t/**\n\t * @generated from protobuf enum value: CHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0;\n\t */\n\tCHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0,\n\t/**\n\t * An elliptic curve multiset hash attesting to the set of objects that\n\t * comprise the live state of the Sui blockchain.\n\t *\n\t * @generated from protobuf enum value: ECMH_LIVE_OBJECT_SET = 1;\n\t */\n\tECMH_LIVE_OBJECT_SET = 1,\n\t/**\n\t * Digest of the checkpoint artifacts.\n\t *\n\t * @generated from protobuf enum value: CHECKPOINT_ARTIFACTS = 2;\n\t */\n\tCHECKPOINT_ARTIFACTS = 2,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointSummary$Type extends MessageType<CheckpointSummary> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.CheckpointSummary', [\n\t\t\t{ no: 1, name: 'bcs', kind: 'message', T: () => Bcs },\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'epoch',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 4,\n\t\t\t\tname: 'sequence_number',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 5,\n\t\t\t\tname: 'total_network_transactions',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{ no: 6, name: 'content_digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 7, name: 'previous_digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t\t{ no: 8, name: 'epoch_rolling_gas_cost_summary', kind: 'message', T: () => GasCostSummary },\n\t\t\t{ no: 9, name: 'timestamp', kind: 'message', T: () => Timestamp },\n\t\t\t{\n\t\t\t\tno: 10,\n\t\t\t\tname: 'commitments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => CheckpointCommitment,\n\t\t\t},\n\t\t\t{ no: 11, name: 'end_of_epoch_data', kind: 'message', T: () => EndOfEpochData },\n\t\t\t{\n\t\t\t\tno: 12,\n\t\t\t\tname: 'version_specific_data',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 12 /*ScalarType.BYTES*/,\n\t\t\t},\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CheckpointSummary\n */\nexport const CheckpointSummary = new CheckpointSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochData$Type extends MessageType<EndOfEpochData> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.EndOfEpochData', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'next_epoch_committee',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => ValidatorCommitteeMember,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 2,\n\t\t\t\tname: 'next_epoch_protocol_version',\n\t\t\t\tkind: 'scalar',\n\t\t\t\topt: true,\n\t\t\t\tT: 4 /*ScalarType.UINT64*/,\n\t\t\t\tL: 0 /*LongType.BIGINT*/,\n\t\t\t},\n\t\t\t{\n\t\t\t\tno: 3,\n\t\t\t\tname: 'epoch_commitments',\n\t\t\t\tkind: 'message',\n\t\t\t\trepeat: 1 /*RepeatType.PACKED*/,\n\t\t\t\tT: () => CheckpointCommitment,\n\t\t\t},\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.EndOfEpochData\n */\nexport const EndOfEpochData = new EndOfEpochData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointCommitment$Type extends MessageType<CheckpointCommitment> {\n\tconstructor() {\n\t\tsuper('sui.rpc.v2.CheckpointCommitment', [\n\t\t\t{\n\t\t\t\tno: 1,\n\t\t\t\tname: 'kind',\n\t\t\t\tkind: 'enum',\n\t\t\t\topt: true,\n\t\t\t\tT: () => [\n\t\t\t\t\t'sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind',\n\t\t\t\t\tCheckpointCommitment_CheckpointCommitmentKind,\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ no: 2, name: 'digest', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },\n\t\t]);\n\t}\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CheckpointCommitment\n */\nexport const CheckpointCommitment = new CheckpointCommitment$Type();\n"],
  "mappings": "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",
  "names": ["CheckpointCommitment_CheckpointCommitmentKind"]
}
