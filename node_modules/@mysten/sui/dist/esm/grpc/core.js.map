{
  "version": 3,
  "sources": ["../../../src/grpc/core.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n\tExperimental_CoreClientOptions,\n\tExperimental_SuiClientTypes,\n} from '../experimental/index.js';\nimport { Experimental_CoreClient } from '../experimental/index.js';\nimport type { SuiGrpcClient } from './client.js';\nimport type { Owner } from './proto/sui/rpc/v2/owner.js';\nimport { Owner_OwnerKind } from './proto/sui/rpc/v2/owner.js';\nimport { chunk, fromBase64, toBase64 } from '@mysten/utils';\nimport type { ExecutedTransaction } from './proto/sui/rpc/v2/executed_transaction.js';\nimport type { TransactionEffects } from './proto/sui/rpc/v2/effects.js';\nimport { UnchangedConsensusObject_UnchangedConsensusObjectKind } from './proto/sui/rpc/v2/effects.js';\nimport {\n\tChangedObject_IdOperation,\n\tChangedObject_InputObjectState,\n\tChangedObject_OutputObjectState,\n} from './proto/sui/rpc/v2/effects.js';\nimport type { BuildTransactionOptions } from '../transactions/index.js';\nimport { TransactionDataBuilder } from '../transactions/index.js';\nimport { bcs } from '../bcs/index.js';\nimport type { OpenSignature, OpenSignatureBody } from './proto/sui/rpc/v2/move_package.js';\nimport {\n\tAbility,\n\tFunctionDescriptor_Visibility,\n\tOpenSignature_Reference,\n\tOpenSignatureBody_Type,\n} from './proto/sui/rpc/v2/move_package.js';\nexport interface GrpcCoreClientOptions extends Experimental_CoreClientOptions {\n\tclient: SuiGrpcClient;\n}\nexport class GrpcCoreClient extends Experimental_CoreClient {\n\t#client: SuiGrpcClient;\n\tconstructor({ client, ...options }: GrpcCoreClientOptions) {\n\t\tsuper(options);\n\t\tthis.#client = client;\n\t}\n\n\tasync getObjects(\n\t\toptions: Experimental_SuiClientTypes.GetObjectsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetObjectsResponse> {\n\t\tconst batches = chunk(options.objectIds, 50);\n\t\tconst results: Experimental_SuiClientTypes.GetObjectsResponse['objects'] = [];\n\n\t\tfor (const batch of batches) {\n\t\t\tconst response = await this.#client.ledgerService.batchGetObjects({\n\t\t\t\trequests: batch.map((id) => ({ objectId: id })),\n\t\t\t\treadMask: {\n\t\t\t\t\tpaths: [\n\t\t\t\t\t\t'owner',\n\t\t\t\t\t\t'object_type',\n\t\t\t\t\t\t'bcs',\n\t\t\t\t\t\t'digest',\n\t\t\t\t\t\t'version',\n\t\t\t\t\t\t'object_id',\n\t\t\t\t\t\t'previous_transaction',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tresults.push(\n\t\t\t\t...response.response.objects.map(\n\t\t\t\t\t(object): Experimental_SuiClientTypes.ObjectResponse | Error => {\n\t\t\t\t\t\tif (object.result.oneofKind === 'error') {\n\t\t\t\t\t\t\t// TODO: improve error handling\n\t\t\t\t\t\t\treturn new Error(object.result.error.message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (object.result.oneofKind !== 'object') {\n\t\t\t\t\t\t\treturn new Error('Unexpected result type');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: object.result.object.objectId!,\n\t\t\t\t\t\t\tversion: object.result.object.version?.toString()!,\n\t\t\t\t\t\t\tdigest: object.result.object.digest!,\n\t\t\t\t\t\t\t// TODO: bcs content is not returned in all cases\n\t\t\t\t\t\t\tcontent: Promise.resolve(object.result.object.bcs?.value!),\n\t\t\t\t\t\t\towner: mapOwner(object.result.object.owner)!,\n\t\t\t\t\t\t\ttype: object.result.object.objectType!,\n\t\t\t\t\t\t\tpreviousTransaction: object.result.object.previousTransaction ?? null,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tobjects: results,\n\t\t};\n\t}\n\tasync getOwnedObjects(\n\t\toptions: Experimental_SuiClientTypes.GetOwnedObjectsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetOwnedObjectsResponse> {\n\t\tconst response = await this.#client.stateService.listOwnedObjects({\n\t\t\towner: options.address,\n\t\t\tobjectType: options.type\n\t\t\t\t? (await this.mvr.resolveType({ type: options.type })).type\n\t\t\t\t: undefined,\n\t\t\tpageToken: options.cursor ? fromBase64(options.cursor) : undefined,\n\t\t\treadMask: {\n\t\t\t\tpaths: [\n\t\t\t\t\t'owner',\n\t\t\t\t\t'object_type',\n\t\t\t\t\t'bcs',\n\t\t\t\t\t'digest',\n\t\t\t\t\t'version',\n\t\t\t\t\t'object_id',\n\t\t\t\t\t'previous_transaction',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\tconst objects = response.response.objects.map(\n\t\t\t(object): Experimental_SuiClientTypes.ObjectResponse => ({\n\t\t\t\tid: object.objectId!,\n\t\t\t\tversion: object.version?.toString()!,\n\t\t\t\tdigest: object.digest!,\n\t\t\t\t// TODO: List owned objects doesn't return content right now\n\t\t\t\tget content() {\n\t\t\t\t\treturn object.bcs?.value\n\t\t\t\t\t\t? Promise.resolve(object.bcs.value)\n\t\t\t\t\t\t: Promise.reject(\n\t\t\t\t\t\t\t\tnew Error('GRPC does not return object contents when listing owned objects'),\n\t\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\towner: mapOwner(object.owner)!,\n\t\t\t\ttype: object.objectType!,\n\t\t\t\tpreviousTransaction: object.previousTransaction ?? null,\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tobjects,\n\t\t\tcursor: response.response.nextPageToken ? toBase64(response.response.nextPageToken) : null,\n\t\t\thasNextPage: response.response.nextPageToken !== undefined,\n\t\t};\n\t}\n\tasync getCoins(\n\t\toptions: Experimental_SuiClientTypes.GetCoinsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetCoinsResponse> {\n\t\tconst response = await this.#client.stateService.listOwnedObjects({\n\t\t\towner: options.address,\n\t\t\tobjectType: `0x2::coin::Coin<${(await this.mvr.resolveType({ type: options.coinType })).type}>`,\n\t\t\tpageToken: options.cursor ? fromBase64(options.cursor) : undefined,\n\t\t\treadMask: {\n\t\t\t\tpaths: [\n\t\t\t\t\t'owner',\n\t\t\t\t\t'object_type',\n\t\t\t\t\t'bcs',\n\t\t\t\t\t'digest',\n\t\t\t\t\t'version',\n\t\t\t\t\t'object_id',\n\t\t\t\t\t'balance',\n\t\t\t\t\t'previous_transaction',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\tobjects: response.response.objects.map(\n\t\t\t\t(object): Experimental_SuiClientTypes.CoinResponse => ({\n\t\t\t\t\tid: object.objectId!,\n\t\t\t\t\tversion: object.version?.toString()!,\n\t\t\t\t\tdigest: object.digest!,\n\t\t\t\t\t// TODO: List owned objects doesn't return content right now\n\t\t\t\t\tget content() {\n\t\t\t\t\t\treturn object.bcs?.value\n\t\t\t\t\t\t\t? Promise.resolve(object.bcs.value)\n\t\t\t\t\t\t\t: Promise.reject(\n\t\t\t\t\t\t\t\t\tnew Error('GRPC does not return object contents when listing owned objects'),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\towner: mapOwner(object.owner)!,\n\t\t\t\t\ttype: object.objectType!,\n\t\t\t\t\tbalance: object.balance?.toString()!,\n\t\t\t\t\tpreviousTransaction: object.previousTransaction ?? null,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tcursor: response.response.nextPageToken ? toBase64(response.response.nextPageToken) : null,\n\t\t\thasNextPage: response.response.nextPageToken !== undefined,\n\t\t};\n\t}\n\n\tasync getBalance(\n\t\toptions: Experimental_SuiClientTypes.GetBalanceOptions,\n\t): Promise<Experimental_SuiClientTypes.GetBalanceResponse> {\n\t\tconst result = await this.#client.stateService.getBalance({\n\t\t\towner: options.address,\n\t\t\tcoinType: (await this.mvr.resolveType({ type: options.coinType })).type,\n\t\t});\n\n\t\treturn {\n\t\t\tbalance: {\n\t\t\t\tbalance: result.response.balance?.balance?.toString() ?? '0',\n\t\t\t\tcoinType: result.response.balance?.coinType ?? options.coinType,\n\t\t\t},\n\t\t};\n\t}\n\n\tasync getAllBalances(\n\t\toptions: Experimental_SuiClientTypes.GetAllBalancesOptions,\n\t): Promise<Experimental_SuiClientTypes.GetAllBalancesResponse> {\n\t\tconst result = await this.#client.stateService.listBalances({\n\t\t\towner: options.address,\n\t\t\tpageToken: options.cursor ? fromBase64(options.cursor) : undefined,\n\t\t\tpageSize: options.limit,\n\t\t});\n\n\t\treturn {\n\t\t\thasNextPage: !!result.response.nextPageToken,\n\t\t\tcursor: result.response.nextPageToken ? toBase64(result.response.nextPageToken) : null,\n\t\t\tbalances: result.response.balances.map((balance) => ({\n\t\t\t\tbalance: balance.balance?.toString() ?? '0',\n\t\t\t\tcoinType: balance.coinType!,\n\t\t\t})),\n\t\t};\n\t}\n\tasync getTransaction(\n\t\toptions: Experimental_SuiClientTypes.GetTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.GetTransactionResponse> {\n\t\tconst { response } = await this.#client.ledgerService.getTransaction({\n\t\t\tdigest: options.digest,\n\t\t\treadMask: {\n\t\t\t\tpaths: ['digest', 'transaction', 'effects', 'signatures', 'balance_changes'],\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\ttransaction: parseTransaction(response.transaction!),\n\t\t};\n\t}\n\tasync executeTransaction(\n\t\toptions: Experimental_SuiClientTypes.ExecuteTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.ExecuteTransactionResponse> {\n\t\tconst { response } = await this.#client.transactionExecutionService.executeTransaction({\n\t\t\ttransaction: {\n\t\t\t\tbcs: {\n\t\t\t\t\tvalue: options.transaction,\n\t\t\t\t},\n\t\t\t},\n\t\t\tsignatures: options.signatures.map((signature) => ({\n\t\t\t\tbcs: {\n\t\t\t\t\tvalue: fromBase64(signature),\n\t\t\t\t},\n\t\t\t\tsignature: {\n\t\t\t\t\toneofKind: undefined,\n\t\t\t\t},\n\t\t\t})),\n\t\t\treadMask: {\n\t\t\t\tpaths: [\n\t\t\t\t\t'transaction.digest',\n\t\t\t\t\t'transaction.transaction',\n\t\t\t\t\t'transaction.effects',\n\t\t\t\t\t'transaction.signatures',\n\t\t\t\t\t'transaction.balance_changes',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\treturn {\n\t\t\ttransaction: parseTransaction(response.transaction!),\n\t\t};\n\t}\n\tasync dryRunTransaction(\n\t\toptions: Experimental_SuiClientTypes.DryRunTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.DryRunTransactionResponse> {\n\t\tconst { response } = await this.#client.transactionExecutionService.simulateTransaction({\n\t\t\ttransaction: {\n\t\t\t\tbcs: {\n\t\t\t\t\tvalue: options.transaction,\n\t\t\t\t},\n\t\t\t},\n\t\t\treadMask: {\n\t\t\t\tpaths: [\n\t\t\t\t\t'transaction.digest',\n\t\t\t\t\t'transaction.transaction',\n\t\t\t\t\t'transaction.effects',\n\t\t\t\t\t'transaction.signatures',\n\t\t\t\t\t'transaction.balance_changes',\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\ttransaction: parseTransaction(response.transaction!),\n\t\t};\n\t}\n\tasync getReferenceGasPrice(): Promise<Experimental_SuiClientTypes.GetReferenceGasPriceResponse> {\n\t\tconst response = await this.#client.ledgerService.getEpoch({});\n\n\t\treturn {\n\t\t\treferenceGasPrice: response.response.epoch?.referenceGasPrice?.toString()!,\n\t\t};\n\t}\n\n\tasync getDynamicFields(\n\t\toptions: Experimental_SuiClientTypes.GetDynamicFieldsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetDynamicFieldsResponse> {\n\t\tconst response = await this.#client.stateService.listDynamicFields({\n\t\t\tparent: options.parentId,\n\t\t\tpageToken: options.cursor ? fromBase64(options.cursor) : undefined,\n\t\t});\n\n\t\treturn {\n\t\t\tdynamicFields: response.response.dynamicFields.map((field) => ({\n\t\t\t\tid: field.fieldId!,\n\t\t\t\tname: {\n\t\t\t\t\ttype: field.name?.name!,\n\t\t\t\t\tbcs: field.name?.value!,\n\t\t\t\t},\n\t\t\t\ttype: field.fieldObject\n\t\t\t\t\t? `0x2::dynamic_field::Field<0x2::dynamic_object_field::Wrapper<${field.name?.name!}>,0x2::object::ID>`\n\t\t\t\t\t: `0x2::dynamic_field::Field<${field.name?.value!},${field.valueType!}>`,\n\t\t\t})),\n\t\t\tcursor: response.response.nextPageToken ? toBase64(response.response.nextPageToken) : null,\n\t\t\thasNextPage: response.response.nextPageToken !== undefined,\n\t\t};\n\t}\n\n\tasync verifyZkLoginSignature(\n\t\toptions: Experimental_SuiClientTypes.VerifyZkLoginSignatureOptions,\n\t): Promise<Experimental_SuiClientTypes.ZkLoginVerifyResponse> {\n\t\tconst { response } = await this.#client.signatureVerificationService.verifySignature({\n\t\t\tmessage: {\n\t\t\t\tname: options.intentScope,\n\t\t\t\tvalue: fromBase64(options.bytes),\n\t\t\t},\n\t\t\tsignature: {\n\t\t\t\tbcs: {\n\t\t\t\t\tvalue: fromBase64(options.signature),\n\t\t\t\t},\n\t\t\t\tsignature: {\n\t\t\t\t\toneofKind: undefined,\n\t\t\t\t},\n\t\t\t},\n\t\t\tjwks: [],\n\t\t});\n\n\t\treturn {\n\t\t\tsuccess: response.isValid ?? false,\n\t\t\terrors: response.reason ? [response.reason] : [],\n\t\t};\n\t}\n\n\tasync getMoveFunction(\n\t\toptions: Experimental_SuiClientTypes.GetMoveFunctionOptions,\n\t): Promise<Experimental_SuiClientTypes.GetMoveFunctionResponse> {\n\t\tconst { response } = await this.#client.movePackageService.getFunction({\n\t\t\tpackageId: (await this.mvr.resolvePackage({ package: options.packageId })).package,\n\t\t\tmoduleName: options.moduleName,\n\t\t\tname: options.name,\n\t\t});\n\n\t\tlet visibility: 'public' | 'private' | 'friend' | 'unknown' = 'unknown';\n\n\t\tswitch (response.function?.visibility) {\n\t\t\tcase FunctionDescriptor_Visibility.PUBLIC:\n\t\t\t\tvisibility = 'public';\n\t\t\t\tbreak;\n\t\t\tcase FunctionDescriptor_Visibility.PRIVATE:\n\t\t\t\tvisibility = 'private';\n\t\t\t\tbreak;\n\t\t\tcase FunctionDescriptor_Visibility.FRIEND:\n\t\t\t\tvisibility = 'friend';\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tfunction: {\n\t\t\t\tpackageId: options.packageId,\n\t\t\t\tmoduleName: options.moduleName,\n\t\t\t\tname: response.function?.name!,\n\t\t\t\tvisibility,\n\t\t\t\tisEntry: response.function?.isEntry ?? false,\n\t\t\t\ttypeParameters:\n\t\t\t\t\tresponse.function?.typeParameters?.map(({ constraints }) => ({\n\t\t\t\t\t\tisPhantom: false,\n\t\t\t\t\t\tconstraints:\n\t\t\t\t\t\t\tconstraints.map((constraint) => {\n\t\t\t\t\t\t\t\tswitch (constraint) {\n\t\t\t\t\t\t\t\t\tcase Ability.COPY:\n\t\t\t\t\t\t\t\t\t\treturn 'copy';\n\t\t\t\t\t\t\t\t\tcase Ability.DROP:\n\t\t\t\t\t\t\t\t\t\treturn 'drop';\n\t\t\t\t\t\t\t\t\tcase Ability.STORE:\n\t\t\t\t\t\t\t\t\t\treturn 'store';\n\t\t\t\t\t\t\t\t\tcase Ability.KEY:\n\t\t\t\t\t\t\t\t\t\treturn 'key';\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn 'unknown';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}) ?? [],\n\t\t\t\t\t})) ?? [],\n\t\t\t\tparameters:\n\t\t\t\t\tresponse.function?.parameters?.map((param) => parseNormalizedSuiMoveType(param)) ?? [],\n\t\t\t\treturns: response.function?.returns?.map((ret) => parseNormalizedSuiMoveType(ret)) ?? [],\n\t\t\t},\n\t\t};\n\t}\n\n\tresolveTransactionPlugin() {\n\t\t// const client = this.#client;\n\t\treturn async function resolveTransactionData(\n\t\t\t_transactionData: TransactionDataBuilder,\n\t\t\t_options: BuildTransactionOptions,\n\t\t\t_next: () => Promise<void>,\n\t\t) {\n\t\t\tthrow new Error('Transaction resolution is not supported with the GRPC client');\n\n\t\t\t// const result = await client.liveDataService.simulateTransaction({\n\t\t\t// \ttransaction: transactionFromData(transactionData)\n\t\t\t// })\n\t\t\t// const resolvedData = dataFromSimulate(result)\n\t\t\t// transactionData.applyResolvedData(resolvedData);\n\n\t\t\t// return await next();\n\t\t};\n\t}\n}\n\nfunction mapOwner(owner: Owner | null | undefined): Experimental_SuiClientTypes.ObjectOwner | null {\n\tif (!owner) {\n\t\treturn null;\n\t}\n\tif (owner.kind === Owner_OwnerKind.IMMUTABLE) {\n\t\treturn {\n\t\t\t$kind: 'Immutable',\n\t\t\tImmutable: true,\n\t\t};\n\t}\n\tif (owner.kind === Owner_OwnerKind.ADDRESS) {\n\t\treturn {\n\t\t\tAddressOwner: owner.address!,\n\t\t\t$kind: 'AddressOwner',\n\t\t};\n\t}\n\tif (owner.kind === Owner_OwnerKind.OBJECT) {\n\t\treturn {\n\t\t\t$kind: 'ObjectOwner',\n\t\t\tObjectOwner: owner.address!,\n\t\t};\n\t}\n\n\tif (owner.kind === Owner_OwnerKind.SHARED) {\n\t\tif (owner.address) {\n\t\t\treturn {\n\t\t\t\t$kind: 'ConsensusAddressOwner',\n\t\t\t\tConsensusAddressOwner: {\n\t\t\t\t\towner: owner.address,\n\t\t\t\t\tstartVersion: owner.version?.toString()!,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t$kind: 'Shared',\n\t\t\tShared: {\n\t\t\t\tinitialSharedVersion: owner.version?.toString()!,\n\t\t\t},\n\t\t};\n\t}\n\n\tthrow new Error('Unknown owner kind');\n}\n\nfunction mapIdOperation(\n\toperation: ChangedObject_IdOperation | undefined,\n): null | 'Created' | 'Deleted' | 'Unknown' | 'None' {\n\tif (operation == null) {\n\t\treturn null;\n\t}\n\tswitch (operation) {\n\t\tcase ChangedObject_IdOperation.CREATED:\n\t\t\treturn 'Created';\n\t\tcase ChangedObject_IdOperation.DELETED:\n\t\t\treturn 'Deleted';\n\t\tcase ChangedObject_IdOperation.NONE:\n\t\tcase ChangedObject_IdOperation.ID_OPERATION_UNKNOWN:\n\t\t\treturn 'None';\n\t\tdefault:\n\t\t\toperation satisfies never;\n\t\t\treturn 'Unknown';\n\t}\n}\n\nfunction mapInputObjectState(\n\tstate: ChangedObject_InputObjectState | undefined,\n): null | 'Exists' | 'DoesNotExist' | 'Unknown' {\n\tif (state == null) {\n\t\treturn null;\n\t}\n\tswitch (state) {\n\t\tcase ChangedObject_InputObjectState.EXISTS:\n\t\t\treturn 'Exists';\n\t\tcase ChangedObject_InputObjectState.DOES_NOT_EXIST:\n\t\t\treturn 'DoesNotExist';\n\t\tcase ChangedObject_InputObjectState.UNKNOWN:\n\t\t\treturn 'Unknown';\n\t\tdefault:\n\t\t\tstate satisfies never;\n\t\t\treturn 'Unknown';\n\t}\n}\n\nfunction mapOutputObjectState(\n\tstate: ChangedObject_OutputObjectState | undefined,\n): null | 'ObjectWrite' | 'PackageWrite' | 'DoesNotExist' | 'Unknown' {\n\tif (state == null) {\n\t\treturn null;\n\t}\n\tswitch (state) {\n\t\tcase ChangedObject_OutputObjectState.OBJECT_WRITE:\n\t\t\treturn 'ObjectWrite';\n\t\tcase ChangedObject_OutputObjectState.PACKAGE_WRITE:\n\t\t\treturn 'PackageWrite';\n\t\tcase ChangedObject_OutputObjectState.DOES_NOT_EXIST:\n\t\t\treturn 'DoesNotExist';\n\t\tcase ChangedObject_OutputObjectState.UNKNOWN:\n\t\t\treturn 'Unknown';\n\t\tdefault:\n\t\t\tstate satisfies never;\n\t\t\treturn 'Unknown';\n\t}\n}\n\nfunction mapUnchangedConsensusObjectKind(\n\tkind: UnchangedConsensusObject_UnchangedConsensusObjectKind | undefined,\n): null | Experimental_SuiClientTypes.UnchangedConsensusObject['kind'] {\n\tif (kind == null) {\n\t\treturn null;\n\t}\n\tswitch (kind) {\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.UNCHANGED_CONSENSUS_OBJECT_KIND_UNKNOWN:\n\t\t\treturn 'Unknown';\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.READ_ONLY_ROOT:\n\t\t\treturn 'ReadOnlyRoot';\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.MUTATE_CONSENSUS_STREAM_ENDED:\n\t\t\treturn 'MutateConsensusStreamEnded';\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.READ_CONSENSUS_STREAM_ENDED:\n\t\t\treturn 'ReadConsensusStreamEnded';\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.CANCELED:\n\t\t\treturn 'Cancelled';\n\t\tcase UnchangedConsensusObject_UnchangedConsensusObjectKind.PER_EPOCH_CONFIG:\n\t\t\treturn 'PerEpochConfig';\n\t\tdefault:\n\t\t\tkind satisfies never;\n\t\t\treturn 'Unknown';\n\t}\n}\n\nexport function parseTransactionEffects({\n\teffects,\n}: {\n\teffects: TransactionEffects | undefined;\n}): Experimental_SuiClientTypes.TransactionEffects | null {\n\tif (!effects) {\n\t\treturn null;\n\t}\n\n\tconst changedObjects = effects.changedObjects.map(\n\t\t(change): Experimental_SuiClientTypes.ChangedObject => {\n\t\t\treturn {\n\t\t\t\tid: change.objectId!,\n\t\t\t\tinputState: mapInputObjectState(change.inputState)!,\n\t\t\t\tinputVersion: change.inputVersion?.toString() ?? null,\n\t\t\t\tinputDigest: change.inputDigest ?? null,\n\t\t\t\tinputOwner: mapOwner(change.inputOwner),\n\t\t\t\toutputState: mapOutputObjectState(change.outputState)!,\n\t\t\t\toutputVersion: change.outputVersion?.toString() ?? null,\n\t\t\t\toutputDigest: change.outputDigest ?? null,\n\t\t\t\toutputOwner: mapOwner(change.outputOwner),\n\t\t\t\tidOperation: mapIdOperation(change.idOperation)!,\n\t\t\t};\n\t\t},\n\t);\n\n\treturn {\n\t\tbcs: effects.bcs?.value!,\n\t\tdigest: effects.digest!,\n\t\tversion: 2,\n\t\tstatus: effects.status?.success\n\t\t\t? {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\terror: null,\n\t\t\t\t}\n\t\t\t: {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\t// TODO: parse errors properly\n\t\t\t\t\terror: JSON.stringify(effects.status?.error),\n\t\t\t\t},\n\t\tgasUsed: {\n\t\t\tcomputationCost: effects.gasUsed?.computationCost?.toString()!,\n\t\t\tstorageCost: effects.gasUsed?.storageCost?.toString()!,\n\t\t\tstorageRebate: effects.gasUsed?.storageRebate?.toString()!,\n\t\t\tnonRefundableStorageFee: effects.gasUsed?.nonRefundableStorageFee?.toString()!,\n\t\t},\n\t\ttransactionDigest: effects.transactionDigest!,\n\t\tgasObject: {\n\t\t\tid: effects.gasObject?.objectId!,\n\t\t\tinputState: mapInputObjectState(effects.gasObject?.inputState)!,\n\t\t\tinputVersion: effects.gasObject?.inputVersion?.toString() ?? null,\n\t\t\tinputDigest: effects.gasObject?.inputDigest ?? null,\n\t\t\tinputOwner: mapOwner(effects.gasObject?.inputOwner),\n\t\t\toutputState: mapOutputObjectState(effects.gasObject?.outputState)!,\n\t\t\toutputVersion: effects.gasObject?.outputVersion?.toString() ?? null,\n\t\t\toutputDigest: effects.gasObject?.outputDigest ?? null,\n\t\t\toutputOwner: mapOwner(effects.gasObject?.outputOwner),\n\t\t\tidOperation: mapIdOperation(effects.gasObject?.idOperation)!,\n\t\t},\n\t\teventsDigest: effects.eventsDigest ?? null,\n\t\tdependencies: effects.dependencies,\n\t\tlamportVersion: effects.lamportVersion?.toString() ?? null,\n\t\tchangedObjects,\n\t\tunchangedConsensusObjects: effects.unchangedConsensusObjects.map(\n\t\t\t(object): Experimental_SuiClientTypes.UnchangedConsensusObject => {\n\t\t\t\treturn {\n\t\t\t\t\tkind: mapUnchangedConsensusObjectKind(object.kind)!,\n\t\t\t\t\t// TODO: we are inconsistent about id vs objectId\n\t\t\t\t\tobjectId: object.objectId!,\n\t\t\t\t\tversion: object.version?.toString() ?? null,\n\t\t\t\t\tdigest: object.digest ?? null,\n\t\t\t\t};\n\t\t\t},\n\t\t),\n\t\tauxiliaryDataDigest: effects.auxiliaryDataDigest ?? null,\n\t};\n}\n\nfunction parseTransaction(\n\ttransaction: ExecutedTransaction,\n): Experimental_SuiClientTypes.TransactionResponse {\n\tconst parsedTx = bcs.SenderSignedData.parse(transaction.transaction?.bcs?.value!)[0];\n\tconst bytes = bcs.TransactionData.serialize(parsedTx.intentMessage.value).toBytes();\n\tconst data = TransactionDataBuilder.restore({\n\t\tversion: 2,\n\t\tsender: parsedTx.intentMessage.value.V1.sender,\n\t\texpiration: parsedTx.intentMessage.value.V1.expiration,\n\t\tgasData: parsedTx.intentMessage.value.V1.gasData,\n\t\tinputs: parsedTx.intentMessage.value.V1.kind.ProgrammableTransaction!.inputs,\n\t\tcommands: parsedTx.intentMessage.value.V1.kind.ProgrammableTransaction!.commands,\n\t});\n\n\tconst objectTypes: Record<string, string> = {};\n\ttransaction.objects?.objects.forEach((object) => {\n\t\tif (object.objectId && object.objectType) {\n\t\t\tobjectTypes[object.objectId] = object.objectType;\n\t\t}\n\t});\n\n\tconst effects = parseTransactionEffects({\n\t\teffects: transaction.effects,\n\t})!;\n\n\treturn {\n\t\tdigest: transaction.digest!,\n\t\tepoch: transaction.effects?.epoch?.toString() ?? null,\n\t\teffects,\n\t\tobjectTypes: Promise.resolve(objectTypes),\n\t\ttransaction: {\n\t\t\tgasData: data.gasData,\n\t\t\tsender: data.sender,\n\t\t\texpiration: data.expiration,\n\t\t\tcommands: data.commands,\n\t\t\tinputs: data.inputs,\n\t\t\tversion: data.version,\n\t\t\tbcs: bytes,\n\t\t},\n\t\tsignatures: parsedTx.txSignatures,\n\t\tbalanceChanges:\n\t\t\ttransaction.balanceChanges?.map((change) => ({\n\t\t\t\tcoinType: change.coinType!,\n\t\t\t\taddress: change.address!,\n\t\t\t\tamount: change.amount!,\n\t\t\t})) ?? [],\n\t};\n}\n\nfunction parseNormalizedSuiMoveType(\n\ttype: OpenSignature,\n): Experimental_SuiClientTypes.OpenSignature {\n\tlet reference: 'mutable' | 'immutable' | null = null;\n\n\tif (type.reference === OpenSignature_Reference.IMMUTABLE) {\n\t\treference = 'immutable';\n\t} else if (type.reference === OpenSignature_Reference.MUTABLE) {\n\t\treference = 'mutable';\n\t}\n\n\treturn {\n\t\treference,\n\t\tbody: parseNormalizedSuiMoveTypeBody(type.body!),\n\t};\n}\n\nfunction parseNormalizedSuiMoveTypeBody(\n\ttype: OpenSignatureBody,\n): Experimental_SuiClientTypes.OpenSignatureBody {\n\tswitch (type.type) {\n\t\tcase OpenSignatureBody_Type.TYPE_UNKNOWN:\n\t\t\treturn { $kind: 'unknown' };\n\t\tcase OpenSignatureBody_Type.ADDRESS:\n\t\t\treturn { $kind: 'address' };\n\t\tcase OpenSignatureBody_Type.BOOL:\n\t\t\treturn { $kind: 'bool' };\n\t\tcase OpenSignatureBody_Type.U8:\n\t\t\treturn { $kind: 'u8' };\n\t\tcase OpenSignatureBody_Type.U16:\n\t\t\treturn { $kind: 'u16' };\n\t\tcase OpenSignatureBody_Type.U32:\n\t\t\treturn { $kind: 'u32' };\n\t\tcase OpenSignatureBody_Type.U64:\n\t\t\treturn { $kind: 'u64' };\n\t\tcase OpenSignatureBody_Type.U128:\n\t\t\treturn { $kind: 'u128' };\n\t\tcase OpenSignatureBody_Type.U256:\n\t\t\treturn { $kind: 'u256' };\n\t\tcase OpenSignatureBody_Type.VECTOR:\n\t\t\treturn {\n\t\t\t\t$kind: 'vector',\n\t\t\t\tvector: parseNormalizedSuiMoveTypeBody(type.typeParameterInstantiation[0]),\n\t\t\t};\n\t\tcase OpenSignatureBody_Type.DATATYPE:\n\t\t\treturn {\n\t\t\t\t$kind: 'datatype',\n\t\t\t\tdatatype: {\n\t\t\t\t\ttypeName: type.typeName!,\n\t\t\t\t\ttypeParameters: type.typeParameterInstantiation.map((t) =>\n\t\t\t\t\t\tparseNormalizedSuiMoveTypeBody(t),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t\tcase OpenSignatureBody_Type.TYPE_PARAMETER:\n\t\t\treturn {\n\t\t\t\t$kind: 'typeParameter',\n\t\t\t\tindex: type.typeParameter!,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn { $kind: 'unknown' };\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
