/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { integer, object, string } from "superstruct";
import { ShinamiRpcClient } from "../rpc.js";
import { base64ToBigInt } from "./utils.js";
import { ZkWalletRpcUrls } from "./endpoints.js";
import { inferRegionalValueFromAccessKey } from "../region.js";
/**
 * Information that identifies a zkLogin user.
 */
export const ZkLoginUserId = object({
    iss: string(),
    aud: string(),
    keyClaimName: string(),
    keyClaimValue: string(),
});
/**
 * zkLogin wallet response schema.
 */
const ZkLoginWalletResponse = object({
    userId: ZkLoginUserId,
    subWallet: integer(),
    salt: string(),
    address: string(),
});
/**
 * zkLogin wallet RPC client.
 */
export class ZkWalletClient extends ShinamiRpcClient {
    /**
     * @param accessKey Wallet access key.
     * @param url Optional URL override.
     */
    constructor(accessKey, url = inferRegionalValueFromAccessKey(accessKey, ZkWalletRpcUrls, (zkWalletRpcUrls) => zkWalletRpcUrls.us1)) {
        super(accessKey, url);
    }
    /**
     * Retrieves a zkLogin wallet or creates a new one if necessary.
     * @param jwt A valid JWT signed by one of the supported OpenID providers.
     * @param keyClaimName The claim name in the JWT that identifies a particular user.
     * @param subWallet The sub-wallet id, which enables the same OpenID user to have more than one
     *    wallet addresses.
     * @returns The zkLogin proof for the given JWT.
     */
    getOrCreateZkLoginWallet(jwt, keyClaimName, subWallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.request("shinami_zkw_getOrCreateZkLoginWallet", {
                jwt,
                keyClaimName,
                subWallet,
            }, ZkLoginWalletResponse);
            return {
                userId: resp.userId,
                subWallet: resp.subWallet,
                salt: base64ToBigInt(resp.salt),
                address: resp.address,
            };
        });
    }
}
