/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
import { PublicKey } from "@mysten/sui/cryptography";
import { Infer } from "superstruct";
import { ShinamiRpcClient } from "../rpc.js";
/**
 * Result schema for createZkLoginProof.
 */
export declare const CreateZkLoginProofResult: import("superstruct").Struct<{
    zkProof: {};
}, {
    /**
     * zkLogin proof.
     */
    zkProof: import("superstruct").Struct<{}, {}>;
}>;
export type CreateZkLoginProofResult = Infer<typeof CreateZkLoginProofResult>;
/**
 * zkLogin prover RPC client.
 */
export declare class ZkProverClient extends ShinamiRpcClient {
    /**
     * @param accessKey Wallet access key.
     * @param url Optional URL override.
     */
    constructor(accessKey: string, url?: string);
    /**
     * Creates a zkLogin proof for the given JWT.
     * @param jwt A valid JWT signed by one of the supported OpenID providers.
     * @param maxEpoch The max epoch used to prepare the JWT nonce.
     * @param ephemeralPublicKey The ephemeral public key used to prepare the JWT nonce.
     * @param jwtRandomness The random bytes used to prepare the JWT nonce.
     * @param salt The zkLogin wallet salt.
     * @param keyClaimName The claim name in the JWT that identifies a particular user.
     * @returns The zkLogin proof for the given JWT.
     */
    createZkLoginProof(jwt: string, maxEpoch: number, ephemeralPublicKey: PublicKey, jwtRandomness: bigint, salt: bigint, keyClaimName?: string): Promise<CreateZkLoginProofResult>;
}
