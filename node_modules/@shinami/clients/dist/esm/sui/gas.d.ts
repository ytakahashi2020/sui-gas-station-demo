/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
import { SuiClient } from "@mysten/sui/client";
import { Transaction } from "@mysten/sui/transactions";
import { Infer } from "superstruct";
import { ShinamiRpcClient } from "../rpc.js";
/**
 * A gasless transaction to be sponsored.
 */
export interface GaslessTransaction {
    /**
     * Base64 encoded `TransactionKind`.
     */
    txKind: string;
    /**
     * Optional sender address. Required when submitting for sponsorship.
     */
    sender?: string;
    /**
     * Optional gas budget. If omitted, it will be estimated from the transaction.
     */
    gasBudget?: number | string;
    /**
     * Optional gas price. If omitted, the reference price will be used.
     */
    gasPrice?: number | string;
}
/**
 * A fully sponsored transaction block.
 */
export declare const SponsoredTransaction: import("superstruct").Struct<{
    signature: string;
    txBytes: string;
    txDigest: string;
    sponsorCost?: {
        computationCost: string;
        storageCost: string;
        storageRebate: string;
    } | undefined;
    expireAtTime?: number | undefined;
    expireAfterEpoch?: string | undefined;
}, {
    /**
     * Base64 encoded transaction bytes, including sponsor gas data.
     */
    txBytes: import("superstruct").Struct<string, null>;
    /**
     * Transaction digest. Can be used to identify this sponsored transaction.
     */
    txDigest: import("superstruct").Struct<string, null>;
    /**
     * Gas owner's signature.
     */
    signature: import("superstruct").Struct<string, null>;
    /**
     * Cost breakdown for the sponsor.
     */
    sponsorCost: import("superstruct").Struct<{
        computationCost: string;
        storageCost: string;
        storageRebate: string;
    } | undefined, {
        computationCost: import("superstruct").Struct<string, null>;
        storageCost: import("superstruct").Struct<string, null>;
        storageRebate: import("superstruct").Struct<string, null>;
    }>;
    /**
     * Expiration time of this sponsored transaction, in Unix epoch seconds.
     */
    expireAtTime: import("superstruct").Struct<number | undefined, null>;
    /**
     * The last Sui epoch this sponsored transaction is valid for.
     */
    expireAfterEpoch: import("superstruct").Struct<string | undefined, null>;
}>;
export type SponsoredTransaction = Infer<typeof SponsoredTransaction>;
/**
 * The status of a sponsored transaction block.
 */
export declare const SponsoredTransactionStatus: import("superstruct").Struct<"IN_FLIGHT" | "COMPLETE" | "INVALID", {
    IN_FLIGHT: "IN_FLIGHT";
    COMPLETE: "COMPLETE";
    INVALID: "INVALID";
}>;
export type SponsoredTransactionStatus = Infer<typeof SponsoredTransactionStatus>;
/**
 * The fund information
 */
export declare const Fund: import("superstruct").Struct<{
    network: string;
    name: string;
    balance: number;
    inFlight: number;
    depositAddress?: string | undefined;
}, {
    network: import("superstruct").Struct<string, null>;
    name: import("superstruct").Struct<string, null>;
    balance: import("superstruct").Struct<number, null>;
    inFlight: import("superstruct").Struct<number, null>;
    depositAddress: import("superstruct").Struct<string | undefined, null>;
}>;
export type Fund = Infer<typeof Fund>;
/**
 * Gas station RPC client.
 */
export declare class GasStationClient extends ShinamiRpcClient {
    /**
     * @param accessKey Gas access key. Note that the access key also determines which network your
     *    transactions are targeting.
     * @param url Optional URL override.
     */
    constructor(accessKey: string, url?: string);
    /**
     * Requests sponsorship for a transaction.
     * @param tx Gasless transaction.
     * @returns A fully sponsored transaction block.
     */
    sponsorTransaction(tx: GaslessTransaction): Promise<SponsoredTransaction>;
    /**
     * Queries the status of a sponsored transaction block.
     * @param txDigest Sponsored transaction digetst.
     * @returns Sponsored transaction status.
     */
    getSponsoredTransactionStatus(txDigest: string): Promise<SponsoredTransactionStatus>;
    /**
     * Queries the fund associated with the access key.
     * @returns The fund information.
     */
    getFund(): Promise<Fund>;
}
/**
 * Builds a gasless transaction.
 * @param txOrBuild Either a `Transaction` object pre-populated with the target transaction data, or
 *    a builder function to populate it.
 * @param options Options
 *    - sender - Optional sender address. Can also be set in the transaction data.
 *    - gasBudget - Optional gas budget. Can also be set in the transaction data.
 *    - gasPrice - Optional gas price. Can also be set in the transaction data.
 *    - sui - `SuiClient`. Required if the transaction uses non fully resolved inputs.
 * @returns A gasless transaction to be sponsored.
 */
export declare function buildGaslessTransaction(txOrBuild: Transaction | ((tx: Transaction) => void | Promise<void>), options?: {
    sender?: string;
    gasBudget?: number | string;
    gasPrice?: number | string;
    sui?: SuiClient;
}): Promise<GaslessTransaction>;
