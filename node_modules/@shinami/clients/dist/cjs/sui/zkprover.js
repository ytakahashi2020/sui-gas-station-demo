"use strict";
/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZkProverClient = exports.CreateZkLoginProofResult = void 0;
const superstruct_1 = require("superstruct");
const rpc_js_1 = require("../rpc.js");
const utils_js_1 = require("./utils.js");
const endpoints_js_1 = require("./endpoints.js");
const region_js_1 = require("../region.js");
/**
 * Result schema for createZkLoginProof.
 */
exports.CreateZkLoginProofResult = (0, superstruct_1.object)({
    /**
     * zkLogin proof.
     */
    zkProof: (0, superstruct_1.type)({}),
});
/**
 * zkLogin prover RPC client.
 */
class ZkProverClient extends rpc_js_1.ShinamiRpcClient {
    /**
     * @param accessKey Wallet access key.
     * @param url Optional URL override.
     */
    constructor(accessKey, url = (0, region_js_1.inferRegionalValueFromAccessKey)(accessKey, endpoints_js_1.ZkProverRpcUrls, (zkProverRpcUrls) => zkProverRpcUrls.us1)) {
        super(accessKey, url);
    }
    /**
     * Creates a zkLogin proof for the given JWT.
     * @param jwt A valid JWT signed by one of the supported OpenID providers.
     * @param maxEpoch The max epoch used to prepare the JWT nonce.
     * @param ephemeralPublicKey The ephemeral public key used to prepare the JWT nonce.
     * @param jwtRandomness The random bytes used to prepare the JWT nonce.
     * @param salt The zkLogin wallet salt.
     * @param keyClaimName The claim name in the JWT that identifies a particular user.
     * @returns The zkLogin proof for the given JWT.
     */
    createZkLoginProof(jwt, maxEpoch, ephemeralPublicKey, jwtRandomness, salt, keyClaimName) {
        return this.request("shinami_zkp_createZkLoginProof", (0, rpc_js_1.trimTrailingParams)([
            jwt,
            maxEpoch.toString(),
            ephemeralPublicKey.toSuiPublicKey(),
            (0, utils_js_1.bigIntToBase64)(jwtRandomness),
            (0, utils_js_1.bigIntToBase64)(salt),
            keyClaimName,
        ]), exports.CreateZkLoginProofResult);
    }
}
exports.ZkProverClient = ZkProverClient;
