/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
import { Infer } from "superstruct";
import { ShinamiRpcClient } from "../rpc.js";
/**
 * Information that identifies a zkLogin user.
 */
export declare const ZkLoginUserId: import("superstruct").Struct<{
    iss: string;
    aud: string;
    keyClaimName: string;
    keyClaimValue: string;
}, {
    iss: import("superstruct").Struct<string, null>;
    aud: import("superstruct").Struct<string, null>;
    keyClaimName: import("superstruct").Struct<string, null>;
    keyClaimValue: import("superstruct").Struct<string, null>;
}>;
export type ZkLoginUserId = Infer<typeof ZkLoginUserId>;
/**
 * zkLogin wallet info.
 */
export interface ZkLoginWallet {
    userId: ZkLoginUserId;
    subWallet: number;
    salt: bigint;
    address: string;
}
/**
 * zkLogin wallet RPC client.
 */
export declare class ZkWalletClient extends ShinamiRpcClient {
    /**
     * @param accessKey Wallet access key.
     * @param url Optional URL override.
     */
    constructor(accessKey: string, url?: string);
    /**
     * Retrieves a zkLogin wallet or creates a new one if necessary.
     * @param jwt A valid JWT signed by one of the supported OpenID providers.
     * @param keyClaimName The claim name in the JWT that identifies a particular user.
     * @param subWallet The sub-wallet id, which enables the same OpenID user to have more than one
     *    wallet addresses.
     * @returns The zkLogin proof for the given JWT.
     */
    getOrCreateZkLoginWallet(jwt: string, keyClaimName?: string, subWallet?: number): Promise<ZkLoginWallet>;
}
