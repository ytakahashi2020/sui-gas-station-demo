/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
import { Client, JSONRPCError } from "@open-rpc/client-js";
import { Infer, Struct } from "superstruct";
/**
 * Base class for all Shinami JSON RPC clients.
 */
export declare class ShinamiRpcClient {
    readonly client: Client;
    /**
     * @param accessKey Access key for the service.
     * @param url Service RPC URL.
     */
    constructor(accessKey: string, url: string);
    /**
     * Issues an RPC request.
     * @param method Request method.
     * @param params Optional request params. Both by name and by position are supported.
     * @param schema Optional result schema. Will validate the result if specified.
     * @returns The RPC result.
     */
    request<T>(method: string, params?: unknown[] | object, schema?: Struct<T>): Promise<T>;
    /**
     * Discovers available RPC methods from the server.
     * @returns OpenRPC spec implemented by the server.
     */
    rpcDiscover(): Promise<object>;
}
/**
 * Trims all tailing `undefined` values from `params` array.
 * @param params Array of request params.
 * @returns Trimmed params.
 */
export declare function trimTrailingParams(params: readonly unknown[]): readonly unknown[];
/**
 * Schema for RPC error details.
 */
export declare const ErrorDetails: Struct<{
    details: string;
}, {
    details: Struct<string, null>;
}>;
export type ErrorDetails = Infer<typeof ErrorDetails>;
/**
 * Extracts error details from an RPC error if available.
 * @param error JSON RPC error.
 * @returns Error details if available.
 */
export declare function errorDetails(error: JSONRPCError): ErrorDetails | undefined;
