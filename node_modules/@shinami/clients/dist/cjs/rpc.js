"use strict";
/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorDetails = exports.ErrorDetails = exports.trimTrailingParams = exports.ShinamiRpcClient = void 0;
const client_js_1 = require("@open-rpc/client-js");
const superstruct_1 = require("superstruct");
/**
 * Base class for all Shinami JSON RPC clients.
 */
class ShinamiRpcClient {
    /**
     * @param accessKey Access key for the service.
     * @param url Service RPC URL.
     */
    constructor(accessKey, url) {
        this.client = new client_js_1.Client(new client_js_1.RequestManager([
            new client_js_1.HTTPTransport(url, {
                headers: {
                    "X-API-Key": accessKey,
                },
            }),
        ]));
    }
    /**
     * Issues an RPC request.
     * @param method Request method.
     * @param params Optional request params. Both by name and by position are supported.
     * @param schema Optional result schema. Will validate the result if specified.
     * @returns The RPC result.
     */
    request(method, params, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.client.request({ method, params });
            if (!schema)
                return result;
            return (0, superstruct_1.mask)(result, schema);
        });
    }
    /**
     * Discovers available RPC methods from the server.
     * @returns OpenRPC spec implemented by the server.
     */
    rpcDiscover() {
        return this.request("rpc.discover");
    }
}
exports.ShinamiRpcClient = ShinamiRpcClient;
/**
 * Trims all tailing `undefined` values from `params` array.
 * @param params Array of request params.
 * @returns Trimmed params.
 */
function trimTrailingParams(params) {
    let end = params.length;
    while (end > 0) {
        if (params[end - 1] !== undefined)
            break;
        end--;
    }
    return end === params.length ? params : params.slice(0, end);
}
exports.trimTrailingParams = trimTrailingParams;
/**
 * Schema for RPC error details.
 */
exports.ErrorDetails = (0, superstruct_1.object)({
    details: (0, superstruct_1.string)(),
});
/**
 * Extracts error details from an RPC error if available.
 * @param error JSON RPC error.
 * @returns Error details if available.
 */
function errorDetails(error) {
    return (0, superstruct_1.validate)(error.data, exports.ErrorDetails, { mask: true })[1];
}
exports.errorDetails = errorDetails;
