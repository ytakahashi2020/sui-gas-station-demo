/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
import { AccountAuthenticator, AnyRawTransaction, MultiAgentTransaction, PendingTransactionResponse, SimpleTransaction } from "@aptos-labs/ts-sdk";
import { Infer } from "superstruct";
import { ShinamiRpcClient } from "../rpc.js";
declare const Fund: import("superstruct").Struct<{
    network: string;
    name: string;
    balance: number;
    inFlight: number;
    depositAddress: string | null;
}, {
    network: import("superstruct").Struct<string, null>;
    name: import("superstruct").Struct<string, null>;
    balance: import("superstruct").Struct<number, null>;
    inFlight: import("superstruct").Struct<number, null>;
    depositAddress: import("superstruct").Struct<string | null, null>;
}>;
type Fund = Infer<typeof Fund>;
/**
 * Gas station RPC client for Aptos and Movement blockchains.
 * Automatically detects the blockchain from the access key format.
 */
export declare class GasStationClient extends ShinamiRpcClient {
    /**
     * @param accessKey Gas access key. The format determines which blockchain and network your
     *    transactions are targeting (e.g., "us1_aptos_mainnet_xxx" or "us1_movement_testnet_xxx").
     * @param url Optional URL override.
     */
    constructor(accessKey: string, url?: string);
    /**
     * Sponsors a transaction by filling in fee payer address and providing fee payer signature.
     *
     * @param transaction The transaction to request sponsorship for.
     *    Note that `transaction.feePayerAddress` is updated in-place upon successful return.
     * @returns Fee payer signature, to be used in transaction submission.
     */
    sponsorTransaction(transaction: AnyRawTransaction): Promise<AccountAuthenticator>;
    /**
     * Sponsors a simple transaction by filling in fee payer info and submits it to the network for
     * execution.
     *
     * @param transaction The simple transaction to request sponsorship for.
     * @param senderSignature Sender signature.
     * @returns The submitted transaction in mempool.
     */
    sponsorAndSubmitSignedTransaction(transaction: SimpleTransaction, senderSignature: AccountAuthenticator): Promise<PendingTransactionResponse>;
    /**
     * Sponsors a multi-agent transaction by filling in fee payer info and submits it to the network
     * for execution.
     *
     * @param transaction The multi-agent transaction to request sponsorship for.
     * @param senderSignature Sender signature.
     * @param secondarySignatures Secondary signer signatures.
     * @returns The submitted transaction in mempool.
     */
    sponsorAndSubmitSignedTransaction(transaction: MultiAgentTransaction, senderSignature: AccountAuthenticator, secondarySignatures: AccountAuthenticator[]): Promise<PendingTransactionResponse>;
    /**
     * Gets information about the fund associated with the access key.
     */
    getFund(): Promise<Fund>;
}
export {};
