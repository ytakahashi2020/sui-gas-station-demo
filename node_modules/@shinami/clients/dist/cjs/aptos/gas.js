"use strict";
/**
 * Copyright 2023-2024 Shinami Corp.
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasStationClient = void 0;
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
const superstruct_1 = require("superstruct");
const rpc_js_1 = require("../rpc.js");
const endpoints_js_1 = require("./endpoints.js");
const region_js_1 = require("../region.js");
const RpcAccountSignature = (0, superstruct_1.object)({
    address: (0, superstruct_1.string)(),
    signature: (0, superstruct_1.array)((0, superstruct_1.integer)()),
});
const SponsorTransactionResult = (0, superstruct_1.object)({
    feePayer: RpcAccountSignature,
});
const SponsorAndSubmitSignedTransactionResult = (0, superstruct_1.object)({
    pendingTransaction: (0, superstruct_1.unknown)(),
});
const Fund = (0, superstruct_1.object)({
    network: (0, superstruct_1.string)(),
    name: (0, superstruct_1.string)(),
    balance: (0, superstruct_1.integer)(),
    inFlight: (0, superstruct_1.integer)(),
    depositAddress: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
});
/**
 * Gas station RPC client for Aptos and Movement blockchains.
 * Automatically detects the blockchain from the access key format.
 */
class GasStationClient extends rpc_js_1.ShinamiRpcClient {
    /**
     * @param accessKey Gas access key. The format determines which blockchain and network your
     *    transactions are targeting (e.g., "us1_aptos_mainnet_xxx" or "us1_movement_testnet_xxx").
     * @param url Optional URL override.
     */
    constructor(accessKey, url = (0, region_js_1.inferRegionalValueFromAccessKey)(accessKey, accessKey.includes("movement")
        ? endpoints_js_1.MovementGasStationRpcUrls
        : endpoints_js_1.GasStationRpcUrls, (gasStationRpcUrls) => gasStationRpcUrls.us1)) {
        super(accessKey, url);
    }
    /**
     * Sponsors a transaction by filling in fee payer address and providing fee payer signature.
     *
     * @param transaction The transaction to request sponsorship for.
     *    Note that `transaction.feePayerAddress` is updated in-place upon successful return.
     * @returns Fee payer signature, to be used in transaction submission.
     */
    sponsorTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { feePayer } = yield this.request("gas_sponsorTransaction", (0, rpc_js_1.trimTrailingParams)([
                transaction.rawTransaction.bcsToHex().toString(),
                (_a = transaction.secondarySignerAddresses) === null || _a === void 0 ? void 0 : _a.map((x) => x.toString()),
            ]), SponsorTransactionResult);
            const sig = ts_sdk_1.AccountAuthenticator.deserialize(new ts_sdk_1.Deserializer(new Uint8Array(feePayer.signature)));
            transaction.feePayerAddress = ts_sdk_1.AccountAddress.fromString(feePayer.address);
            return sig;
        });
    }
    sponsorAndSubmitSignedTransaction(transaction, senderSignature, secondarySignatures) {
        return __awaiter(this, void 0, void 0, function* () {
            const secondarySigners = [];
            if (transaction.secondarySignerAddresses) {
                if ((secondarySignatures === null || secondarySignatures === void 0 ? void 0 : secondarySignatures.length) !==
                    transaction.secondarySignerAddresses.length)
                    throw new Error("Unexpected number of secondary signatures");
                secondarySigners.push(...transaction.secondarySignerAddresses.map((address, i) => ({
                    address: address.toString(),
                    signature: secondarySignatures[i].bcsToHex().toString(),
                })));
            }
            const { pendingTransaction } = yield this.request("gas_sponsorAndSubmitSignedTransaction", [
                transaction.rawTransaction.bcsToHex().toString(),
                senderSignature.bcsToHex().toString(),
                secondarySigners,
            ], SponsorAndSubmitSignedTransactionResult);
            return pendingTransaction;
        });
    }
    /**
     * Gets information about the fund associated with the access key.
     */
    getFund() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("gas_getFund", [], Fund);
        });
    }
}
exports.GasStationClient = GasStationClient;
